pipeline {
  agent any
  environment {
    GCP_PROJECT = "mlops-learning-458705"
    IMAGE_NAME = "gcr.io/${GCP_PROJECT}/ml-project-predictor:latest"
  }

  stages {
    stage('Clone Repo') {
      steps {
        checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[credentialsId: 'github-token', url: 'https://github.com/abhikunwar/abhi-mlops.git']])
      }
    }

    stage("Run Training and Save Model") {
    steps {
        withCredentials([file(credentialsId: 'gcp-keys', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
            script {
                echo "Setting up Python environment and running training"
                sh '''
                python -m venv venv
                . venv/bin/activate
                pip install --upgrade pip
                pip install -e .

                export GOOGLE_APPLICATION_CREDENTIALS=${GOOGLE_APPLICATION_CREDENTIALS}
                python pipeline/model_training_pipeline.py
                '''
            }
        }
    }
}
    stage('creating docker image and push to the container registry'){
        steps{
            withCredentials([file(credentialsId: 'gcp-keys' , variable : 'GOOGLE_APPLICATION_CREDENTIALS')]){
                script{
                    echo "docker  image creation and push to gcr"
                    sh'''
                    export PATH="$PATH:/var/jenkins_home/google-cloud-sdk/bin"
                    gcloud auth activate-service-account --key-file=${GOOGLE_APPLICATION_CREDENTIALS}
                    gcloud config set project ${GCP_PROJECT}
                    gcloud auth configure-docker --quiet
                    docker build -t gcr.io/${GCP_PROJECT}/ml-project:latest .
                    docker push gcr.io/${GCP_PROJECT}/ml-project:latest 
                    '''

                }
            }
            
        }
    }
}
}